# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-09-16T03:59:41+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import BaseModel, EmailStr, Field, RootModel


class Action(BaseModel):
    action_type: ActionType = Field(..., title='Action Type')
    position_size_pct: Optional[float] = Field(1.0, title='Position Size Pct')
    duration_days: Optional[int] = Field(365, title='Duration Days')
    sl_pct: Optional[float] = Field(1.0, title='Sl Pct')
    tp_pct: Optional[float] = Field(1.0, title='Tp Pct')


class ActionType(Enum):
    BUY = 'BUY'
    SELL = 'SELL'
    HOLD = 'HOLD'


class AdvisorResponse(BaseModel):
    final_decision: FinalRecommendation
    """
    Khuyến nghị Quyết định cuối cùng.
    """
    final_risk: FinalRecommendation
    """
    Đánh giá Rủi ro cuối cùng.
    """
    final_opportunity: FinalRecommendation
    """
    Đánh giá Cơ hội cuối cùng.
    """
    final_action: Action
    """
    Action được mapper cuối dcungf
    """
    aggregated_scores: AggregatedScoreInfo
    """
    Các điểm số tổng hợp trước khi qua MetaRule.
    """
    ticker: str = Field(..., title='Ticker')
    """
    Mã cổ phiếu được phân tích.
    """
    generated_at_utc: str = Field(..., title='Generated At Utc')
    """
    Thời gian tạo báo cáo (ISO format).
    """
    generated_timestamp: int = Field(..., title='Generated Timestamp')
    """
    Generate with timestamp
    """


class AdxDirection(Enum):
    uptrend = 'uptrend'
    downtrend = 'downtrend'
    undefined = 'undefined'


class AggregatedScoreInfo(BaseModel):
    raw_decision_score: float = Field(..., title='Raw Decision Score')
    """
    Điểm số quyết định thô, -1 là sell immediate, 1 là very strong buy, từ -1 tới 1
    """
    raw_risk_score: float = Field(..., title='Raw Risk Score')
    """
    Điểm số rủi ro thô, 0 là ko rủi ro, 1 là rủi ro rất cao, từ 0 tới 1
    """
    raw_opportunity_score: float = Field(..., title='Raw Opportunity Score')
    """
    Điểm số cơ hội thô 0 là ko có cơ hội, 1 là cơ hội rất cao, từ 0 tới 1.
    """


class AuthorizationURLResponse(BaseModel):
    authorization_url: str = Field(..., title='Authorization Url')


class BaseSHAPExplaination(BaseModel):
    base_value: float = Field(..., title='Base Value')
    """
    Average predicted value (normalized log-odds or percent).
    """
    prediction_outcome: float = Field(..., title='Prediction Outcome')
    """
    Final forecast result after adding all contributions.
    """
    top_features: List[TopFeature] = Field(..., title='Top Features')
    """
    List of most influential features.
    """


class BehaviorModifiers(BaseModel):
    position_sizing_factor: Optional[float] = Field(
        1.0, ge=0.1, le=2.0, title='Position Sizing Factor'
    )
    """
    Factor to scale position size. 1.0 is default.
    """
    risk_tolerance_factor: Optional[float] = Field(
        1.0, ge=0.5, le=1.5, title='Risk Tolerance Factor'
    )
    """
    Factor to adjust risk parameters like Stop-Loss. >1.0 means higher risk tolerance.
    """


class CapitalIncomePart(BaseModel):
    initial_capital: float = Field(..., gt=0.0, title='Initial Capital')
    """
    Initial capital for this profile.
    """
    income_dependency: IncomeDependency = Field(..., title='Income Dependency')
    """
    Degree of dependence on investment income.
    """


class CurrentStatusReport(BaseModel):
    vwap_status: VwapStatus = Field(..., title='Vwap Status')
    """
    Comparison between VWAP-D and current price
    """
    open_status: OpenStatus = Field(..., title='Open Status')
    """
    Comparison between current price and open price
    """
    rsi_status: RsiStatus = Field(..., title='Rsi Status')
    """
    RSI Status
    """
    evidence: Dict[str, Any] = Field(..., title='Evidence')
    """
    A dictionary describe evidence of status analysis
    """


class DailyAnalysisReport(BaseModel):
    key_indicators: KeyIndicators
    """
    Some important key indicators to mid-term and long-term
    """
    trend_report: TrendReport
    """
    Trend report
    """
    sr_report: SRReport
    """
    Support/Resistance report
    """
    pattern_report: PatternReport
    """
    Pattern Report
    """


class DataType(Enum):
    daily = 'daily'
    intraday = 'intraday'
    news = 'news'


class Description(RootModel[str]):
    root: str = Field(..., max_length=500, title='Description')


class Effect(Enum):
    positive = 'positive'
    negative = 'negative'


class ExplainationRuleResponse(BaseModel):
    rule_id: str = Field(..., title='Rule Id')
    name: str = Field(..., title='Name')
    purpose: SemanticType
    rule_status: RuleStatus
    created_at_ts: int = Field(..., title='Created At Ts')
    root: NodeEntity
    metrics: Optional[PerformanceMetrics] = None
    explain: str = Field(..., title='Explain')


class FinalRecommendation(BaseModel):
    final_score: float = Field(..., title='Final Score')
    """
    Điểm số cuối cùng sau khi đã tổng hợp và cá nhân hóa.
    """
    purpose: str = Field(..., title='Purpose')
    label: str = Field(..., title='Label')
    final_recommend: str = Field(..., title='Final Recommend')
    """
    Final recommend
    """
    triggered_rules: List[TriggeredRuleInfo] = Field(..., title='Triggered Rules')
    """
    Danh sách các quy tắc đã được kích hoạt và đóng góp vào kết quả.
    """


class ForecastingReport(BaseModel):
    ticker: str = Field(..., title='Ticker')
    """
    Ticker symbol for forecasting
    """
    sector: str = Field(..., title='Sector')
    """
    Sector of ticker
    """
    forecasts: List[SingleTaskForecastReport] = Field(..., title='Forecasts')
    """
    List of forecasting each single task
    """


class ForecastingReportResponse(BaseModel):
    ticker: str = Field(..., title='Ticker')
    """
    Ticker symbol for forecasting
    """
    sector: str = Field(..., title='Sector')
    """
    Sector of ticker
    """
    forecasts: List[SingleTaskForecastReport] = Field(..., title='Forecasts')
    """
    List of forecasting each single task
    """


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class ImpactAssessmentReport(BaseModel):
    level: Level = Field(..., title='Level')
    """
    Level of impact
    """
    words: Optional[List[str]] = Field(None, title='Words')
    """
    List of evidence impact words
    """


class IncomeDependency(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class IntradayAnalysisReport(BaseModel):
    current_status_report: CurrentStatusReport
    """
    Status report
    """
    momentum_report: MomentumReport
    """
    Momentum report
    """
    key_levels: KeyLevelsReport
    """
    Some of key levels
    """


class InvestGoalPart(BaseModel):
    primary_goal: PrimaryGoal = Field(..., title='Primary Goal')
    """
    The primary goal of this investment profile.
    """
    investment_horizon: InvestmentHorizon = Field(..., title='Investment Horizon')
    """
    The expected investment time frame.
    """
    expected_annual_return_pct: int = Field(
        ..., ge=0, le=100, title='Expected Annual Return Pct'
    )
    """
    Expected annual rate of return (%)
    """


class InvestmentHorizon(Enum):
    short_term = 'short_term'
    mid_term = 'mid_term'
    long_term = 'long_term'


class InvestmentKnowledge(Enum):
    beginner = 'beginner'
    intermediate = 'intermediate'
    advanced = 'advanced'
    expert = 'expert'


class KeyIndicators(BaseModel):
    sma_20: Optional[float] = Field(..., title='Sma 20')
    sma_50: Optional[float] = Field(..., title='Sma 50')
    sma_200: Optional[float] = Field(..., title='Sma 200')
    rsi_14: Optional[float] = Field(..., title='Rsi 14')
    adx_14: Optional[float] = Field(..., title='Adx 14')
    dmp_14: Optional[float] = Field(..., title='Dmp 14')
    dmn_14: Optional[float] = Field(..., title='Dmn 14')
    bbu_20: Optional[float] = Field(..., title='Bbu 20')
    bbl_20: Optional[float] = Field(..., title='Bbl 20')
    atr_14: Optional[float] = Field(..., title='Atr 14')
    psar: Optional[float] = Field(..., title='Psar')


class KeyLevelsReport(BaseModel):
    day_high: float = Field(..., title='Day High')
    day_low: float = Field(..., title='Day Low')
    open_price: float = Field(..., title='Open Price')
    vwap: Optional[float] = Field(..., title='Vwap')
    or_30m_high: Optional[float] = Field(..., title='Or 30M High')
    or_30m_low: Optional[float] = Field(..., title='Or 30M Low')


class KeywordHighlightingReport(BaseModel):
    positive_keywords: List[str] = Field(..., title='Positive Keywords')
    """
    List of positive keyword highlighted
    """
    negative_keywords: List[str] = Field(..., title='Negative Keywords')
    """
    List of negative keyword highlighted
    """


class KnowledgeExpPart(BaseModel):
    investment_knowledge: InvestmentKnowledge = Field(..., title='Investment Knowledge')
    """
    Level of knowledge of financial markets.
    """
    years_of_experience: int = Field(..., ge=0, le=50, title='Years Of Experience')
    """
    Number of years of investment experience.
    """


class Label(Enum):
    negative = 'negative'
    neutral = 'neutral'
    positive = 'positive'


class Level(Enum):
    low = 'low'
    moderate = 'moderate'
    high = 'high'
    unknown = 'unknown'


class LongTermTrendReport(BaseModel):
    ma_direction: MaDirection = Field(..., title='Ma Direction')
    """
    Direction using MA indicators
    """
    ma_status: MaStatus = Field(..., title='Ma Status')
    """
    Status using MA indicators and latest close price
    """
    evidence: Dict[str, Any] = Field(..., title='Evidence')
    """
    A dictionary describe evidence of trend analysis
    """


class LossReaction(Enum):
    panic_sell = 'panic_sell'
    reduce_exposure = 'reduce_exposure'
    hold_and_wait = 'hold_and_wait'
    buy_the_dip = 'buy_the_dip'


class MaDirection(Enum):
    uptrend = 'uptrend'
    downtrend = 'downtrend'
    undefined = 'undefined'


class MaStatus(Enum):
    positive = 'positive'
    negative = 'negative'
    undefined = 'undefined'


class MacdCrossover(Enum):
    bull = 'bull'
    bear = 'bear'
    neutral = 'neutral'


class MidTermTrendReport(BaseModel):
    ma_direction: MaDirection = Field(..., title='Ma Direction')
    """
    Direction using MA indicators
    """
    ma_status: MaStatus = Field(..., title='Ma Status')
    """
    Status using MA indicators and latest close price
    """
    evidence: Dict[str, Any] = Field(..., title='Evidence')
    """
    A dictionary describe evidence of trend analysis
    """
    adx_direction: AdxDirection = Field(..., title='Adx Direction')
    """
    Direction using MA indicators
    """


class MomentumReport(BaseModel):
    macd_crossover: MacdCrossover = Field(..., title='Macd Crossover')
    """
    Decide relationship of MACD and Signal line
    """
    volume_status: VolumeStatus = Field(..., title='Volume Status')
    """
    Decide if volume spike ratio > 2.0
    """
    opening_range_status: OpeningRangeStatus = Field(..., title='Opening Range Status')
    """
    Opening Range breakout
    """
    evidence: Dict[str, Any] = Field(..., title='Evidence')
    """
    A dictionary describe evidence of momentum analysis
    """


class NDaysDistributionTaskMetadata(BaseModel):
    problem_id: Literal['ndays-distribution'] = Field(
        'ndays-distribution', title='Problem Id'
    )
    targets: List[str] = Field(..., title='Targets')
    """
    Targets of task, need to plain, example target_tb_15d_2tp_1sl
    """
    units: str = Field(..., title='Units')
    """
    Units of target
    """
    horizon: int = Field(..., title='Horizon')
    """
    Window for look for distribution (mean/std/min/max/q25/q75)
    """


class NERElement(BaseModel):
    entity_group: str = Field(..., title='Entity Group')
    """
    Name of entity group
    """
    word: str = Field(..., title='Word')
    """
    word recognized
    """


class NERReport(BaseModel):
    entities: List[NERElement] = Field(..., title='Entities')
    """
    List of entity
    """


class NewsAnalysisReport(BaseModel):
    ticker: str = Field(..., title='Ticker')
    reports: List[SingleNewsAnalysisReport] = Field(..., title='Reports')
    summary: SummaryReport


class NewsReportResponse(BaseModel):
    ticker: str = Field(..., title='Ticker')
    reports: List[SingleNewsAnalysisReport] = Field(..., title='Reports')
    summary: SummaryReport


class NodeEntity(BaseModel):
    node_name: str = Field(..., title='Node Name')
    children: Optional[List[NodeEntity]] = Field(None, title='Children')


class NodeResponse(BaseModel):
    node_name: str = Field(..., title='Node Name')
    description: str = Field(..., title='Description')
    node_type: NodeType
    return_type: SemanticType
    """
    return type of a nodes
    """
    args_type: Optional[List[SemanticType]] = Field(None, title='Args Type')
    """
    Argument type, only need for operator node
    """


class NodeType(Enum):
    constant = 'constant'
    variable = 'variable'
    operator = 'operator'
    any = 'any'


class OpenStatus(Enum):
    above = 'above'
    below = 'below'


class OpeningRangeStatus(Enum):
    bull_breakout = 'bull-breakout'
    bear_breakdown = 'bear-breakdown'
    inside = 'inside'


class OverallStrengthTrendReport(BaseModel):
    strength: Strength = Field(..., title='Strength')
    """
    Overall strength of trend
    """
    value: Union[int, float] = Field(..., title='Value')
    """
    Value of overall strength
    """


class PatternObj(BaseModel):
    name: str = Field(..., title='Name')
    """
    Friendly name of patterns
    """
    pattern_type: PatternType = Field(..., title='Pattern Type')
    """
    Identify that this is chart patterns or candlestick patterns
    """
    sentiment: Sentiment = Field(..., title='Sentiment')
    """
    Identify the meaning of patterns is BULL or BEAR
    """
    score: Union[int, float] = Field(..., title='Score')
    """
    Score each pattern rewarded
    """
    confirmation_date: str = Field(..., title='Confirmation Date')
    """
    ISO Format string to describe confimation date of this pattern
    """
    evidence: Dict[str, Any] = Field(..., title='Evidence')
    """
    A dictionary describe evidence of a recognized pattern
    """


class PatternReport(BaseModel):
    history_window: Optional[int] = Field(90, title='History Window')
    """
    History window to view data
    """
    prominence_pct: Optional[float] = Field(0.015, title='Prominence Pct')
    """
    Prominence percents to find peaks
    """
    distance: Optional[int] = Field(5, title='Distance')
    """
    Distance of neighbor points to find peaks
    """
    lookback_period: Optional[int] = Field(5, title='Lookback Period')
    """
    Lookback period for candlestick patterns
    """
    num_top_patterns: Optional[int] = Field(4, title='Num Top Patterns')
    """
    Number of top patterns to recognize
    """
    top_patterns: List[PatternObj] = Field(..., title='Top Patterns')
    """
    Top patterns recongized
    """


class PatternType(Enum):
    chart = 'chart'
    candlestick = 'candlestick'


class PerformanceFilterWeights(BaseModel):
    num_trades: Optional[float] = Field(0.0, title='Num Trades')
    total_return_pct: Optional[float] = Field(0.0, title='Total Return Pct')
    max_drawdown_pct: Optional[float] = Field(0.0, title='Max Drawdown Pct')
    win_rate_pct: Optional[float] = Field(0.0, title='Win Rate Pct')
    profit_factor: Optional[float] = Field(0.0, title='Profit Factor')
    sharpe_ratio: Optional[float] = Field(0.0, title='Sharpe Ratio')
    sortino_ratio: Optional[float] = Field(0.0, title='Sortino Ratio')
    annual_return_stability: Optional[float] = Field(
        0.0, title='Annual Return Stability'
    )
    cagr: Optional[float] = Field(0.0, title='Cagr')


class PerformanceHardConstraints(BaseModel):
    num_trades: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Num Trades'
    )
    total_return_pct: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Total Return Pct'
    )
    max_drawdown_pct: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Max Drawdown Pct'
    )
    win_rate_pct: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Win Rate Pct'
    )
    profit_factor: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Profit Factor'
    )
    sharpe_ratio: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Sharpe Ratio'
    )
    sortino_ratio: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Sortino Ratio'
    )
    annual_return_stability: Optional[List] = Field(
        [None, None], max_length=2, min_length=2, title='Annual Return Stability'
    )
    cagr: Optional[List] = Field([None, None], max_length=2, min_length=2, title='Cagr')


class PerformanceMetrics(BaseModel):
    num_trades: Optional[int] = Field(0, title='Num Trades')
    total_return_pct: Optional[float] = Field(0.0, title='Total Return Pct')
    max_drawdown_pct: Optional[float] = Field(0.0, title='Max Drawdown Pct')
    win_rate_pct: Optional[float] = Field(0.0, title='Win Rate Pct')
    profit_factor: Optional[float] = Field(0.0, title='Profit Factor')
    sharpe_ratio: Optional[float] = Field(0.0, title='Sharpe Ratio')
    sortino_ratio: Optional[float] = Field(0.0, title='Sortino Ratio')
    annual_return_stability: Optional[float] = Field(
        0.0, title='Annual Return Stability'
    )
    cagr: Optional[float] = Field(0.0, title='Cagr')


class PersonalPreferPart(BaseModel):
    preferred_sectors: Optional[List[str]] = Field(None, title='Preferred Sectors')
    """
    Preferred sectors (eg: ['TECH', 'HEALTHCARE']).
    """
    excluded_sectors: Optional[List[str]] = Field(None, title='Excluded Sectors')
    """
    Sectors you want to exclude.
    """
    ethical_investing: Optional[bool] = Field(False, title='Ethical Investing')
    """
    Prefer ethical investing (ESG) criteria.
    """


class PriceDataPoint(BaseModel):
    open: Optional[float] = Field(None, title='Open')
    high: Optional[float] = Field(None, title='High')
    low: Optional[float] = Field(None, title='Low')
    close: Optional[float] = Field(None, title='Close')
    volume: Optional[int] = Field(None, title='Volume')
    timestamp: int = Field(..., title='Timestamp')
    """
    Unix timestamp (seconds) for the start of the day (UTC).
    """


class PriceResponse(BaseModel):
    metadata: TickerMetadata
    """
    metadata of a ticker
    """
    datas: List[PriceDataPoint] = Field(..., title='Datas')
    """
    daily data or intraday data
    """


class PrimaryFocus(Enum):
    mid_term = 'mid-term'
    long_term = 'long-term'


class PrimaryGoal(Enum):
    capital_preservation = 'capital_preservation'
    income_generation = 'income_generation'
    capital_growth = 'capital_growth'
    speculation = 'speculation'


class ProfileCreateRequest(BaseModel):
    profile_name: str = Field(..., max_length=100, min_length=3, title='Profile Name')
    """
    Name of profile
    """
    description: str = Field(..., title='Description')
    """
    Short description about this profile
    """
    risk_tolerance: RiskTolerancePart
    invest_goal: InvestGoalPart
    knowledge_exp: KnowledgeExpPart
    capital_income: CapitalIncomePart
    personal_prefer: PersonalPreferPart
    use_in_advisor: Optional[bool] = Field(True, title='Use In Advisor')
    """
    Allow Advisor to use this profile to personalize advice.
    """
    is_default: Optional[bool] = Field(False, title='Is Default')
    """
    Set as default profile.
    """


class ProfileName(RootModel[str]):
    root: str = Field(..., max_length=100, min_length=3, title='Profile Name')


class ProfileResponse(BaseModel):
    profile_name: str = Field(..., max_length=100, min_length=3, title='Profile Name')
    """
    Name of profile
    """
    description: str = Field(..., title='Description')
    """
    Short description about this profile
    """
    risk_tolerance: RiskTolerancePart
    invest_goal: InvestGoalPart
    knowledge_exp: KnowledgeExpPart
    capital_income: CapitalIncomePart
    personal_prefer: PersonalPreferPart
    use_in_advisor: Optional[bool] = Field(True, title='Use In Advisor')
    """
    Allow Advisor to use this profile to personalize advice.
    """
    is_default: Optional[bool] = Field(False, title='Is Default')
    """
    Set as default profile.
    """
    profile_id: str = Field(..., title='Profile Id')
    user_id: str = Field(..., title='User Id')
    created_at_ts: int = Field(..., title='Created At Ts')
    updated_at_ts: int = Field(..., title='Updated At Ts')


class ProfileUpdateRequest(BaseModel):
    profile_name: Optional[ProfileName] = Field(None, title='Profile Name')
    description: Optional[Description] = Field(None, title='Description')
    risk_tolerance: Optional[RiskTolerancePart] = None
    invest_goal: Optional[InvestGoalPart] = None
    knowledge_exp: Optional[KnowledgeExpPart] = None
    capital_income: Optional[CapitalIncomePart] = None
    personal_prefer: Optional[PersonalPreferPart] = None
    use_in_advisor: Optional[bool] = Field(None, title='Use In Advisor')
    is_default: Optional[bool] = Field(None, title='Is Default')


class QuantitivePreferencesConfigRequest(BaseModel):
    weights: PerformanceFilterWeights
    constraints: PerformanceHardConstraints
    modifiers: BehaviorModifiers


class QuickCheckReportResponse(BaseModel):
    ticker: str = Field(..., title='Ticker')
    """
    Symbol of ticker
    """
    generated_at_utc: str = Field(..., title='Generated At Utc')
    """
    ISO format string of generated time
    """
    generated_timestamp: int = Field(..., title='Generated Timestamp')
    """
    Timestamp value of generated time
    """
    technical_report: TechnicalReport
    """
    Technical Report
    """
    forecasting_report: ForecastingReport
    """
    Forecasting report
    """
    news_report: NewsAnalysisReport
    """
    News report
    """


class RelevantNewsPoint(BaseModel):
    news_uuid: str = Field(..., title='News Uuid')
    title: str = Field(..., title='Title')
    summary: Optional[str] = Field(None, title='Summary')
    provider: Optional[str] = Field(None, title='Provider')
    link: Optional[str] = Field(None, title='Link')
    publish_ts: Optional[int] = Field(None, title='Publish Ts')
    collect_ts: int = Field(..., title='Collect Ts')


class RelevantNewsResponse(BaseModel):
    metadata: TickerMetadata
    """
    metadata of a ticker
    """
    datas: List[RelevantNewsPoint] = Field(..., title='Datas')
    """
    news
    """


class ReportType(Enum):
    daily = 'daily'
    intraday = 'intraday'
    all = 'all'


class RiskAppetite(Enum):
    very_conservative = 'very_conservative'
    conservative = 'conservative'
    moderate = 'moderate'
    aggressive = 'aggressive'
    very_aggressive = 'very_aggressive'


class RiskTolerancePart(BaseModel):
    risk_appetite: RiskAppetite = Field(..., title='Risk Appetite')
    """
    Overall risk tolerance
    """
    loss_reaction: LossReaction = Field(..., title='Loss Reaction')
    """
    Typical reaction when the market drops sharply.
    """


class RsiStatus(Enum):
    overbought = 'overbought'
    oversold = 'oversold'
    neutral = 'neutral'


class RuleResponse(BaseModel):
    rule_id: str = Field(..., title='Rule Id')
    name: str = Field(..., title='Name')
    purpose: SemanticType
    rule_status: RuleStatus
    created_at_ts: int = Field(..., title='Created At Ts')
    root: NodeEntity
    metrics: Optional[PerformanceMetrics] = None


class RuleStatus(Enum):
    READY = 'READY'
    EVOLVING = 'EVOLVING'
    DEPRECATED = 'DEPRECATED'


class SHAPExplaination(BaseModel):
    for_target: str = Field(..., title='For Target')
    """
    Name of target
    """
    explaination: BaseSHAPExplaination
    """
    Explaination for this target
    """


class SRIdentifyLevelObj(BaseModel):
    level: float = Field(..., title='Level')
    """
    Level Value of supportance/resitance identify
    """
    source: str = Field(..., title='Source')
    """
    Source of the Level Value of supportance/resitance identify
    """


class SRReport(BaseModel):
    history_window: Optional[int] = Field(90, title='History Window')
    """
    History window for identify level
    """
    supports: List[SRIdentifyLevelObj] = Field(..., title='Supports')
    """
    Support points
    """
    resistances: List[SRIdentifyLevelObj] = Field(..., title='Resistances')
    """
    Resistance points
    """


class SectorMetadataResponse(BaseModel):
    sector_code: str = Field(..., title='Sector Code')
    sector_name: str = Field(..., title='Sector Name')


class SemanticType(Enum):
    NUMERICAL = 'NUMERICAL'
    BOOLEAN = 'BOOLEAN'
    PRICE = 'PRICE'
    PERCENTAGE = 'PERCENTAGE'
    FINANCIAL_RATIO = 'FINANCIAL_RATIO'
    MOMENTUM = 'MOMENTUM'
    TREND = 'TREND'
    VOLATILITY = 'VOLATILITY'
    VOLUME = 'VOLUME'
    SENTIMENT = 'SENTIMENT'
    FORECAST_PROB = 'FORECAST_PROB'
    DECISION_SIGNAL = 'DECISION_SIGNAL'
    RISK_LEVEL = 'RISK_LEVEL'
    OPPORTUNITY_RATING = 'OPPORTUNITY_RATING'
    ANY = 'ANY'
    ANY_NUMERIC = 'ANY_NUMERIC'


class Sentiment(Enum):
    bull = 'bull'
    bear = 'bear'
    neutral = 'neutral'


class SentimentAnalysisReport(BaseModel):
    label: Label = Field(..., title='Label')
    """
    Label of sentiment
    """
    score: Union[int, float] = Field(..., title='Score')
    """
    Score of sentiment
    """


class SingleNewsAnalysisReport(BaseModel):
    text: str = Field(..., title='Text')
    """
    Text to analysis
    """
    sentiment_analysis: SentimentAnalysisReport
    """
    Sentiment Analysis Report
    """
    ner: NERReport
    """
    NER Report
    """
    impact_assessment: ImpactAssessmentReport
    """
    Impact Assessment Report
    """
    keyword_highlighting_evidence: KeywordHighlightingReport
    """
    Keyword Highlighting Evidence
    """


class SingleTaskForecastReport(BaseModel):
    task_name: str = Field(..., title='Task Name')
    """
    Identify of task
    """
    task_metadata: Union[TripleBarrierTaskMetadata, NDaysDistributionTaskMetadata] = (
        Field(..., discriminator='problem_id', title='Task Metadata')
    )
    """
    Metadata of task.
    """
    prediction: List[float] = Field(..., title='Prediction')
    """
    Model forecast results (in percent form multiplied by 100).
    """
    units: Units = Field(..., title='Units')
    """
    Units of prediction
    """
    evidence: List[SHAPExplaination] = Field(..., title='Evidence')
    """
    Evidence by SHAP
    """


class Strength(Enum):
    strong = 'strong'
    moderate = 'moderate'
    weak = 'weak'
    undefined = 'undefined'


class SummaryReport(BaseModel):
    num_positive_sentiment: int = Field(..., title='Num Positive Sentiment')
    num_negative_sentiment: int = Field(..., title='Num Negative Sentiment')
    num_high_impact: int = Field(..., title='Num High Impact')
    num_moderate_impact: int = Field(..., title='Num Moderate Impact')
    num_low_impact: int = Field(..., title='Num Low Impact')
    avg_of_positive_keyword_found: float = Field(
        ..., title='Avg Of Positive Keyword Found'
    )
    avg_of_negative_keyword_found: float = Field(
        ..., title='Avg Of Negative Keyword Found'
    )
    avg_of_ner_found: float = Field(..., title='Avg Of Ner Found')


class TechnicalReport(BaseModel):
    report_type: Optional[ReportType] = Field('all', title='Report Type')
    """
    Decide which analysis type will be chosen
    """
    daily_report: Optional[DailyAnalysisReport] = None
    """
    Daily Analysis Report
    """
    intraday_report: Optional[IntradayAnalysisReport] = None
    """
    Intraday Analysis Report
    """


class TechnicalReportResponse(BaseModel):
    report_type: Optional[ReportType] = Field('all', title='Report Type')
    """
    Decide which analysis type will be chosen
    """
    daily_report: Optional[DailyAnalysisReport] = None
    """
    Daily Analysis Report
    """
    intraday_report: Optional[IntradayAnalysisReport] = None
    """
    Intraday Analysis Report
    """


class TickerMetadata(BaseModel):
    ticker: str = Field(..., title='Ticker')
    company_name: Optional[str] = Field(None, title='Company Name')
    exchange_code: str = Field(..., title='Exchange Code')
    currency: str = Field(..., title='Currency')
    timezone: str = Field(..., title='Timezone')
    sector_name: str = Field(..., title='Sector Name')
    data_type: DataType = Field(..., title='Data Type')


class TopFeature(BaseModel):
    feature: str = Field(..., title='Feature')
    """
    Name of related features
    """
    value: float = Field(..., title='Value')
    """
    Real value of feature at forecasting time
    """
    contribution: float = Field(..., title='Contribution')
    """
    SHAP value, indicating the magnitude and direction of the influence.
    """
    effect: Effect = Field(..., title='Effect')
    """
    Direction of effect
    """


class TrendReport(BaseModel):
    primary_focus: Optional[PrimaryFocus] = Field('mid_term', title='Primary Focus')
    """
    Primary focus of analysis
    """
    midterm_report: MidTermTrendReport
    """
    Mid-Term Trend Report
    """
    longterm_report: LongTermTrendReport
    """
    Long-Term Trend Report
    """
    overall_strength: OverallStrengthTrendReport
    """
    Overall strength
    """


class TriggeredRuleInfo(BaseModel):
    rule_id: str = Field(..., title='Rule Id')
    """
    ID của quy tắc.
    """
    name: str = Field(..., title='Name')
    """
    Tên của quy tắc để con người đọc.
    """
    score: float = Field(..., title='Score')
    """
    Điểm số mà quy tắc trả về (đã chuẩn hóa).
    """
    purpose: str = Field(..., title='Purpose')
    """
    Mục đích của quy tắc, ví dụ: 'DECISION_SIGNAL'.
    """


class TripleBarrierTaskMetadata(BaseModel):
    problem_id: Literal['triple-barrier'] = Field('triple-barrier', title='Problem Id')
    targets: List[str] = Field(..., title='Targets')
    """
    Targets of task, need to plain, example target_tb_15d_2tp_1sl
    """
    units: str = Field(..., title='Units')
    """
    Units of target
    """
    horizon: int = Field(..., title='Horizon')
    """
    Horizon to meet timeout
    """
    tp_pct: float = Field(..., title='Tp Pct')
    """
    TP percent to win, example 0.02 is meaning 1.02 multiplier of current price
    """
    sl_pct: float = Field(..., title='Sl Pct')
    """
    SL percent to loss, example 0.02 is 0.98 multiplier of current price
    """


class Units(Enum):
    percent = 'percent'
    category = 'category'


class UniversalNewsPoint(BaseModel):
    news_uuid: str = Field(..., title='News Uuid')
    title: str = Field(..., title='Title')
    summary: Optional[str] = Field(None, title='Summary')
    provider: Optional[str] = Field(None, title='Provider')
    link: Optional[str] = Field(None, title='Link')
    publish_ts: Optional[int] = Field(None, title='Publish Ts')
    collect_ts: int = Field(..., title='Collect Ts')
    keyword: str = Field(..., title='Keyword')
    title_hash: str = Field(..., title='Title Hash')


class UniversalNewsResponse(BaseModel):
    datas: List[UniversalNewsPoint] = Field(..., title='Datas')
    """
    universal news
    """


class UserResponse(BaseModel):
    email: EmailStr = Field(..., title='Email')
    full_name: Optional[str] = Field(None, title='Full Name')
    avatar_url: Optional[str] = Field(None, title='Avatar Url')
    user_id: str = Field(..., title='User Id')
    google_id: str = Field(..., title='Google Id')
    is_active: bool = Field(..., title='Is Active')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class VolumeStatus(Enum):
    normal = 'normal'
    high_spike = 'high-spike'


class VwapStatus(Enum):
    above = 'above'
    below = 'below'
    undefined = 'undefined'


NodeEntity.model_rebuild()
