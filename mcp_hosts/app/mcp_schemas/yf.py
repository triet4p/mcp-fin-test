# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-09-20T09:07:26+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class StockRealtimePrice(BaseModel):
    ticker: str = Field(..., title='Ticker')
    """
    Stock ticker symbol
    """
    open: Optional[float] = Field(None, title='Open')
    """
    Today's opening price
    """
    day_high: Optional[float] = Field(None, title='Day High')
    """
    Highest price of the day
    """
    day_low: Optional[float] = Field(None, title='Day Low')
    """
    Lowest price of the day
    """
    last_price: Optional[float] = Field(None, title='Last Price')
    """
    Price at the time of API call
    """
    last_volume: Optional[float] = Field(None, title='Last Volume')
    """
    Trading volume at the time of API call
    """
    ts: int = Field(..., title='Ts')
    """
    Timestamp when the response was generated
    """
    error: Optional[str] = Field(None, title='Error')
    """
    Error message if data could not be retrieved
    """


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')
